建立
components（放置静态组件的文件夹）
routers（放置配置路由规则的文件夹）
views（视图，放置动态增删改查组件的文件夹）
三个文件夹

在APP.vue文件中，引入需要的结构文件，我们发现会没有样式，再利用
import 导入所需要的botoostrpCSS样式文件。
把头部组件从App.vue文件中抽离出来，放置到刚刚设置的静态组件的文件夹中的AppHeader组件中。
然后在APP.vue文件中，利用import AppHeader 导入分离出去的组件，
并且注册局部组件，然后再头部的位置使用。
左侧导航栏与头部组件一样。

操作中间的组件的时候，我们点击左侧导航栏的时候需要有对应的路由，所以我们需要下载路由插件，
vue-router. main.js中引入模块。
 Vue.js 官方提供的一些插件 (例如 vue-router) 在检测到 
 Vue 是可访问的全局变量时会自动调用 Vue.use()。
然而在例如 CommonJS 的模块环境中，你应该始终显式地调用 Vue.use()：
引入完毕后，需要创建路由对象，设置路由规则new VueRouter
设置路由规则 则需要对应的组件。我们在左侧导航栏可以分为
三个部分，每个按钮分为对应的一部分。方便以后我们维护与管理
equips（英雄），heroes（装备），weapons（武器）。
再App.vue文件里抽取主内容的组件，然后设置一个占位符，<router-view></router-view>为路由所匹配的组件占位。
在刚刚创建的每个按钮的文件夹，创建各自对应的组件。
在mainjs导入各自所创建的组件，设置路由规则。

给每个对应导航按钮，外面包裹一个li我们可以设置<router-link>
（有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。）
下一步设置导航高亮显示，我们可以通过 exact-active-class="active"，给每一个li上加上这样类名，
（配置当链接被精确匹配的时候应该激活的 class。注意默认值也是可以通过路由构造函数选项 linkExactActiveClass 进行全局配置的。）
我们也可以通过（路由构造函数）（选项） linkExactActiveClass：类名 进行全局配置 


